#!/usr/bin/python

import re
import xmlrpclib
import sys
import urllib2

api = xmlrpclib.ServerProxy('https://rpc.gandi.net/xmlrpc/')

def main():
    apikey = ''
    domain = 'raibert.com'

    if check_if_apikey_exists(apikey) == False:
        print >> sys.stderr, ("Apikey " + apikey + " does not exist or is malformed")
        sys.exit(80)
    if check_if_domain_exists(apikey, domain) == False:
        print >> sys.stderr, ("Domain " + domain + " does not exist")
        sys.exit(82)

    address = get_public_ipv4()
    if not address:
        print >> sys.stderr,  ("Can't find local ip address")
        sys.exit(84)

    zone_id = get_zoneid_by_domain(apikey, domain)
    fail_if_no_record(apikey, zone_id, '*', 'A')
    fail_if_no_record(apikey, zone_id, '@', 'A')
    star_changed = check_if_ip_changed(apikey, zone_id, '*', 'A', address)
    at_changed = check_if_ip_changed(apikey, zone_id, '@', 'A', address)
    if not (star_changed or at_changed):
        print ("The IP for '*' and '@' has not changed")
        sys.exit(0)

    version_id = create_new_zone_version(apikey, zone_id)
    update_record(apikey, zone_id, version_id, '*', 'A', address)
    update_record(apikey, zone_id, version_id, '@', 'A', address)
    api.domain.zone.version.set(apikey, zone_id, version_id)

def api_version(apikey):
    return api.version.info(apikey)

def zone_list(apikey):
    return api.domain.zone.list(apikey)

def zone_record_list(apikey, zone_id):
    return api.domain.zone.record.list(apikey, zone_id, 0)

def create_new_zone_version(apikey, zone_id):
    return api.domain.zone.version.new(apikey, zone_id)

def domain_info(apikey, domain):
    return api.domain.info(apikey, domain)

def get_zoneid_by_domain(apikey, domain):
    return domain_info(apikey, domain)['zone_id']

def get_public_ipv4():
    try:
        return urllib2.urlopen('http://api.externalip.net/ip/').read()
    except:
        return None

def update_record(apikey, zone_id, zone_version, record, rtype, value):
    delete_record(apikey, zone_id, zone_version, record, rtype)
    insert_record(apikey, zone_id, zone_version, record, rtype, value)
    print " "+ record + " "+ rtype + " " + value

def delete_record(apikey, zone_id, zone_version, record, rtype):
    recordListOptions = {"name": record,
                         "type": rtype}

    records = api.domain.zone.record.delete(apikey, zone_id, zone_version, recordListOptions)

def insert_record(apikey, zone_id, zone_version, record, rtype, value):
    zoneRecord = {"name": record,
                  "ttl": 10800,
                  "type": rtype,
                  "value": value}

    api.domain.zone.record.add(apikey, zone_id, zone_version, zoneRecord)

def check_if_domain_exists(apikey, domain):
    try:
        api.domain.info(apikey, domain)
        return True
    except xmlrpclib.Fault as err:
        return False

#will always return true, even with malformed or empty apikey.
#api.version.info(apikey) in api_version returns a valid API version
#even if apikey is empty string or None.
def check_if_apikey_exists(apikey):
    try:
        api_version(apikey)
        return True
    except xmlrpclib.Fault as err:
        return False

def fail_if_no_record(apikey, zone_id, record, rtype):
    if check_if_record_exists(apikey, zone_id, record, rtype) == False:
        print >> sys.stderr, (rtype + " Record " + record + " does not exist, please create")
        sys.exit(83)

def check_if_record_exists(apikey, zone_id, record, rtype):
    recordListOptions = {"name": record,
                         "type": rtype}

    records = api.domain.zone.record.list(apikey, zone_id, 0, recordListOptions)
    if len(records) > 0:
        return True

    return False

def check_if_ip_changed(apikey, zone_id, record, rtype, external_ip):
    recordListOptions = {"name": record,
                         "type": rtype}

    records = api.domain.zone.record.list(apikey, zone_id, 0, recordListOptions)
    if len(records) > 0:
        for record in records:
            if record['value'] == external_ip:
                return False
        return True
    return False

if __name__ == "__main__":
    main()
